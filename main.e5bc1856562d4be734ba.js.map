{"version":3,"sources":["webpack:///../js/task-one.js","webpack:///../js/task-two.js","webpack:///../js/task-three.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","setTimeout","logSuccess","id","amount","logError","warn","catch"],"mappings":"kGACA,MAAMA,EAAQC,GACH,IAAIC,QAAUC,IACjBA,EAASF,KAKVG,EAASC,GAAQC,QAAQC,IAAI,kBAAkBF,OAGrDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GCXlB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAO,IAAIf,QAAUC,IACnBA,EAASY,MAKT,EAASA,GAAgBT,QAAQY,MAAMH,GAW7CH,EAAgBH,EAAO,SAASD,KAAK,GACrCI,EAAgBH,EAAO,OAAOD,KAAK,G,8BC9BrC,MAIQW,EAAmBC,IACvB,MAAMpB,GALyBqB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAgBpC,OAVkB,IAAIpB,QAAS,CAACC,EAASuB,KACvCC,WAAW,KACUJ,KAAKE,SAAW,IAGpCtB,EAASiB,GAETM,EAAQN,MAERpB,IAKC4B,EAAa,EAAGC,KAAIC,aACxBxB,QAAQC,IAAI,eAAesB,kBAAmBC,QAG1CC,EAAW,EAAGF,SAClBvB,QAAQ0B,KAAK,gCAAgCH,+BAa/CV,EAAgB,CAAEU,GAAI,GAAIC,OAAQ,MAC/BtB,KAAKoB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,OAAQ,MAC/BtB,KAAKoB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,OAAQ,KAC/BtB,KAAKoB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,OAAQ,MAC/BtB,KAAKoB,GACLK,MAAMF,K","file":"main.e5bc1856562d4be734ba.js","sourcesContent":["\r\nconst delay = ms => {\r\n    return new Promise ((resolve) => {\r\n        resolve (ms);\r\n   \r\n    })\r\n };\r\n \r\n const logger = time => console.log(`Resolved after ${time}ms`);\r\n \r\n // Вызовы функции для проверки\r\n delay(2000).then(logger); // Resolved after 2000ms\r\n delay(1000).then(logger); // Resolved after 1000ms\r\n delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n export {delay, logger};","\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n  \r\n      return new Promise ((resolve) => {\r\n        resolve (updatedUsers);\r\n      })\r\n  };\r\n  \r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n\r\n\r\n  export {logger};\r\n","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {  \r\n    const delay = randomIntegerFromInterval(200, 500);  \r\n     const promise =  new Promise ((resolve, reject) =>{\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        \r\n       if(canProcess){\r\n       resolve (transaction)\r\n       }\r\n       reject (transaction)\r\n      })\r\n    }, delay);\r\n    return promise\r\n  };\r\n  \r\n\r\n  const logSuccess = ({ id, amount }) => {\r\n    console.log(`Transaction ${id} processed in ${amount}ms`);\r\n  };\r\n  \r\n  const logError = ({ id }) => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  /*\r\n   * Работает так\r\n  //  */\r\n  // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n"],"sourceRoot":""}